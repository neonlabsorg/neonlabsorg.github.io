"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3297],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),d=a,f=p["".concat(c,".").concat(d)]||p[d]||h[d]||r;return n?o.createElement(f,i(i({ref:t},u),{},{components:n})):o.createElement(f,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},724:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var o=n(7462),a=n(3366),r=(n(7294),n(3905)),i=["components"],s={},c="Transaction Value token as an analogue of ETH for Neon EVM Solutions",l={unversionedId:"devportal/value_token",id:"devportal/value_token",isDocsHomePage:!1,title:"Transaction Value token as an analogue of ETH for Neon EVM Solutions",description:"This section contains introductory information about the Transaction Value token (hereinafter Value token), which is analogous to the ETH token in Neon EVM solutions.",source:"@site/docs/devportal/value_token.md",sourceDirName:"devportal",slug:"/devportal/value_token",permalink:"/docs/devportal/value_token",editUrl:"https://github.com/neonlabsorg/neon-evm.docs/docs/devportal/value_token.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview of Neon EVM Architecture",permalink:"/docs/devportal/neon_evm_arch"},next:{title:"Installing and setting up MetaMask",permalink:"/docs/devportal/metamask_setup"}},u=[{value:"Storing balances inside Neon EVM",id:"storing-balances-inside-neon-evm",children:[]},{value:"Creating an Ethereum account",id:"creating-an-ethereum-account",children:[]},{value:"Payment for execution of a transaction",id:"payment-for-execution-of-a-transaction",children:[{value:"Token circulation",id:"token-circulation",children:[]}]}],h={toc:u};function p(e){var t=e.components,s=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},h,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"transaction-value-token-as-an-analogue-of-eth-for-neon-evm-solutions"},"Transaction Value token as an analogue of ETH for Neon EVM Solutions"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This section contains introductory information about the ",(0,r.kt)("em",{parentName:"p"},"Transaction Value token")," (hereinafter ",(0,r.kt)("em",{parentName:"p"},"Value token"),"), which is analogous to the ETH token in Neon EVM solutions.  ")),(0,r.kt)("p",null,"Using the original ",(0,r.kt)("inlineCode",{parentName:"p"},"ETH")," token in Neon EVM can create additional difficulties when calculating payment of rewards to transaction participants. Therefore, the ",(0,r.kt)("em",{parentName:"p"},"Value token")," is introduced to circulate inside Neon EVM. This token is analogous to ETH, coming from the Ethereum network through one of the bridges: ",(0,r.kt)("a",{parentName:"p",href:"https://solana.com/wormhole"},"WormHole")," or ",(0,r.kt)("a",{parentName:"p",href:"https://solana.com/ecosystem/sollet"},"Sollet"),". Each of these bridges transfers funds (assets) from ETH-token to SPL-token and back.  "),(0,r.kt)("p",null,"Transfer of funds using bridges is automated, so the converted tokens are directly transferred to Neon EVM. The token conversion scheme is implemented in such a way that it allows transactions to be executed in parallel. Unlike the method of conversion through ERC20 tokens (this method is used in Ethereum, where a map is used with accounts inside a contract), this scheme does not allow transactions to line up in one queue.  "),(0,r.kt)("p",{align:"center"},(0,r.kt)("p",null,(0,r.kt)("img",{src:n(9637).Z}),"  ")),(0,r.kt)("h2",{id:"storing-balances-inside-neon-evm"},"Storing balances inside Neon EVM"),(0,r.kt)("p",null,"Inside Neon EVM is the Ethereum account. For each user, the Ethereum account contains two fields for storing two types of coins:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ETH")," (or ",(0,r.kt)("inlineCode",{parentName:"li"},"USDT"),"): a coin identifier, which is a ",(0,r.kt)("em",{parentName:"li"},"Value token"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PAYMENT"),": a token to pay for transactions; each user can create a token, which they will pay with the operator for transactions.")),(0,r.kt)("p",null,"Part of the Ethereum account code should work with ",(0,r.kt)("inlineCode",{parentName:"p"},"ETH")," and the other part with ",(0,r.kt)("inlineCode",{parentName:"p"},"PAYMENT"),".  "),(0,r.kt)("p",null,"The Solana account is outside Neon EVM and is built as a program address of the Ethereum account. Therefore, only the Ethereum account can access the Solana account. The Solana account contains a balance in SPL tokens. All operations with a ",(0,r.kt)("em",{parentName:"p"},"Value token")," are performed through an appeal to the SPL token. This balance is built in a certain fixed way according to the Ethereum account address and the Neon EVM program address. Therefore, only the Solana account can access this balance.  "),(0,r.kt)("p",null,"Since only a specific Ethereum account can access the Solana account, only this Ethereum account can also access the Solana account balance.  "),(0,r.kt)("p",null,"When funds are transferred between users, an ",(0,r.kt)("inlineCode",{parentName:"p"},"SPL")," token is requested, and it transfers funds from one balance to another. Users' balances are stored in their accounts. This placement of balances eliminates the appearance of a queue for processing transactions."),(0,r.kt)("p",null,"Neon EVM contains the ERC20 contract. This contract works with the balances of Solana's accounts (the ERC20 contract is called from inside the Solidity contract)."),(0,r.kt)("h2",{id:"creating-an-ethereum-account"},"Creating an Ethereum account"),(0,r.kt)("p",null,"As soon as an Ethereum account is created, an ",(0,r.kt)("inlineCode",{parentName:"p"},"SPL")," token balance is automatically built for a specific user. This operation can only be done by Neon EVM since only it has authorization to perform an operation from the program-account address (Solana account).  "),(0,r.kt)("p",null,"After the Ethereum account is created, it becomes possible to send a ",(0,r.kt)("em",{parentName:"p"},"Value token")," to the contract to a user's balance to process transfers made from the contract code."),(0,r.kt)("h2",{id:"payment-for-execution-of-a-transaction"},"Payment for execution of a transaction"),(0,r.kt)("p",null,"A user has the ability to choose the token in which they will pay an operator for completing a transaction.\nTo do this, the user creates an account in Neon EVM, where he can transfer ",(0,r.kt)("inlineCode",{parentName:"p"},"ETH")," tokens through a bridge to pay for transactions. They automatically get a balance in the SPL token.  "),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},"Transferring ",(0,r.kt)("inlineCode",{parentName:"em"},"ETH")," (or ",(0,r.kt)("inlineCode",{parentName:"em"},"USDT"),") tokens through one bridge (for example, through ",(0,r.kt)("a",{parentName:"em",href:"https://solana.com/wormhole"},"WormHole"),") will not be equivalent to transferring the same tokens through another bridge (for example, through ",(0,r.kt)("a",{parentName:"em",href:"https://solana.com/ecosystem/sollet"},"Sollet"),"). This means that the user cannot withdraw ",(0,r.kt)("inlineCode",{parentName:"em"},"ETH")," tokens from their balance through one bridge (",(0,r.kt)("a",{parentName:"em",href:"https://solana.com/wormhole"},"WormHole"),"), if these tokens were transferred to this balance through another bridge (",(0,r.kt)("a",{parentName:"em",href:"https://solana.com/ecosystem/sollet"},"Sollet"),")"),".  ")),(0,r.kt)("p",null,"Since a coroutine address is linked to the user's balance, no one except this coroutine address can use this token."),(0,r.kt)("h3",{id:"token-circulation"},"Token circulation"),(0,r.kt)("p",null,"When a user creates a transaction, they specify the cost of its execution, taking into account gas price. An operator receives the transaction for execution taking into account the cost specified by the user, as well as a fee. The user's funds are blocked to be paid to the operator following execution.  "),(0,r.kt)("p",null,"User funds are transferred to the collateral pool in the form of ",(0,r.kt)("inlineCode",{parentName:"p"},"SOL")," tokens. The amount of tokens needed depends on setting up a multisig account (in the current implementation, this value is hardcoded).  "),(0,r.kt)("p",null,"Depending on the number of operations in a transaction, it can be performed in one or several iterations."),(0,r.kt)("h4",{id:"token-circulation-for-transaction-execution-in-one-iteration"},"Token circulation for transaction execution in one iteration"),(0,r.kt)("p",null,"Before executing a transaction, an operator transfers funds to the Neon token collateral pool. At the same time, they pay a fee to the validator for checking signatures and pays rent for storing data on the balance of the account.  "),(0,r.kt)("p",null,"After the transaction is completed, ",(0,r.kt)("inlineCode",{parentName:"p"},"PAYMENT")," tokens are transferred from the user's balance to the operator's balance to cover the costs."),(0,r.kt)("h4",{id:"token-circulation-for-transaction-execution-in-multiple-iterations"},"Token circulation for transaction execution in multiple iterations"),(0,r.kt)("p",null,"Unlike a non-iterative transaction, the payment of funds to operators is added to make them more interested in facilitating faster transaction execution. This is done so that the accounts involved in the process are not blocked for an extended period of time.  "),(0,r.kt)("p",null,"At the start of an iterative transaction, an operator transfers a fee to the collateral pool, as well as funds (",(0,r.kt)("inlineCode",{parentName:"p"},"SOL")," tokens) to a special deposit account. The funds in this account will be paid to the operator who completes the transaction.  The fee will be paid for execution costs over multiple iterations.  "),(0,r.kt)("p",null,"The priority to receive funds from a deposit is given to the operator who sent the transaction for execution.  "),(0,r.kt)("p",null,"A transaction contains the name of the operator that is executing it. Also, the transaction indicates the block number when the last activity of this operator was. If fewer blocks have passed than the hardcoded value of the blocks, then this operator can continue the transaction. Only the operator specified in it can cancel the transaction. If more blocks have passed, then any operator can continue the transaction. The right to execute the transaction passes to the operator that intercepts this execution, that is, who is ahead of the others.  "),(0,r.kt)("p",null,"The right to withdraw funds from a deposit is granted to the operator who performs the final step. At this step, the user's funds are transferred to the deposit.  "),(0,r.kt)("p",null,'If for some reason a transaction is canceled (using the "Cancel" operation), the blocked funds of a user are returned to them. The deposit that was frozen is burned. No payout is made to operators. This is done so that operators are motivated to complete the transaction.'))}p.isMDXComponent=!0},9637:function(e,t,n){t.Z=n.p+"assets/images/value_token-1-b2d036ee1eb16f93afb44721012eeabd.png"}}]);